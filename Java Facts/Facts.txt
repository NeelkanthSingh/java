Java is a compiled/Interpreted language.
Compiled means all the code is converted into machine code before it is executed.
Interpreted means the code is converted into machine code as it is executed.

Java is a statically typed language. This means that the type of variable is known at compile time while in dynamically typed languages, the type of variable is known at run time.

Java code is compiled into bytecode. This bytecode is then interpreted by the Java Virtual Machine (JVM).
JDK contains JRE which contains JVM. The compiler is part of the JDK.
JRE contains JVM. The interpreter is part of the JRE.
JVM is the same for all platforms. This means that the same Java program can be run on Windows, Mac, and Linux.

Memory Stack: Stack memory in java is used for static memory allocation and the execution of a thread.
LIFO (Last In First Out) is the order of allocation and de-allocation of memory in the stack.
The stack is used for storing the local variables and method parameters.
The stack is also used for storing the reference variables of the objects.
The stack is also used for storing the return address of the methods.
The stack is also used for storing the primitive data types.

Memory Heap: Space is used to store objects and JRE classes at runtime.
New objects are created in the heap.
Reference variables are stored in the stack and the objects are stored in the heap.

Frame: A stack frame contains all the data for a single method call.
It contains the local variables, method parameters, return address, and other information.
The stack frame is created when a method is called and destroyed when the method returns.

Memory Method Area:
The method area is used to store the class level information like the name of the class, modifiers, fields, methods, constructors, static variables, and static methods.

Pass by value: In Java, all parameters are passed by value. This means that the value of the variable is passed to the method.

In a conditional expression, the expression is joined with and or or. The expression is evaluated from left to right. If the first expression is true, the second expression is not evaluated. If the first expression is false, the second expression is evaluated.

In switch statements, the case labels must be constants. The case labels must be of the same type as the switch expression. The case labels must be unique. The case labels must be compile-time constants.
In switch case, to get an OR scenario, we can use the fall-through feature. This means that we can use the same code for multiple cases.
In switch case, the expression can be of type byte, short, char, int, enum, String. Or Byte, Short, Character, Integer.

In Java, when two class have same name but different package, to use both classes, we can use fully qualified name, for one class, we can use import statement, and for one class, we can use fully qualified name.
In Java, Classes under java.lang package are imported by default. We don't need to import them explicitly.

Access modifiers in Java are public, private, protected, and default.
Access modifiers in java are only for classes, attributes, methods, and constructors.
default is the default access modifier. It is used when we don't specify any access modifier.
default access modifier only allows access within the package.
protected access modifier allows access within the package and outside the package but through inheritance only.

static keyword associates with the class rather than the object.
static method only allow access to static variables.

In Java, main method is what the JVM looks for to start the program. The main method is static. The main method is public. The main method is void. The main method is the entry point of the program.
String[] args is the command line arguments. It is an array of String objects.

Type inference is the automatic deduction of the data type of an expression. In Java, type inference is used for local variable declaration and lambda expressions.
Type inference with var keyword is only available in Java 10 and above.

Final keyword is used to create constants, prevent inheritance, and prevent method overriding.
Final keyword can be used with variables, methods, and classes.
Final variables can be initialized only once. Final variables must be initialized before use.
Final variables when declared outside the method are can be declared as static.
Final methods can also be declared inside the method.

enum are used to define a set of named constants. The enum constants are implicitly final and static.
enum are alternative to static final constants though enum are more powerful.

Wrapper classes are used to convert primitive data types into objects. Wrapper classes are immutable. Wrapper classes are final.

String is immutable. String is a class. String is a reference type.
String is stored in the String pool. String pool is a special memory area in the heap.
String shares the same reference if the value is same.
Creating string using new keyword creates a new object in the heap.

StringBuilder is mutable. It creates object in the heap. It is perfect for string manipulation.

Exceptions are used to handle errors in the program. Exceptions are objects. Exceptions are thrown using throw keyword. Exceptions are caught using try-catch block.
Errors are not exceptions. Errors are thrown by the JVM. Errors are not caught by the try-catch block.
Error are not meant to be caught. Errors are meant to be fixed.
The Throwable class is the superclass of all the exceptions and errors.
The Exception class is the superclass of all the exceptions.
RuntimeException is the superclass of all the unchecked exceptions.
Unchecked exceptions can be thrown by the JVM or the programmer.
Unchecked exceptions don't need to be explicitly declared in a method or a constructor using throws keyword.
Checked exceptions need to be explicitly declared in a method or a constructor using throws keyword.
Checked exceptions are compile time exceptions.
Checked exceptions force you to deal with them in the compile time
Everything in Java is Object Class. Object class is the superclass of all the classes.
If a client can reasonably be expected to recover from an exception, make it a checked exception. If a client cannot do anything to recover from the exception, make it an unchecked exception.

BigDecimal is used to perform arithmetic operations on floating point numbers. BigDecimal is immutable. BigDecimal is used to perform exact calculations.
BigDecimal is used to perform calculations on money.

throw keyword is used to throw an exception. throw keyword is used to throw an exception explicitly.
throws keyword is used to declare an exception. throws keyword is used to declare an exception explicitly.
You don't want to swallow the exception. You want to throw the exception. You want to throw the exception to the caller. You want to throw the exception to the caller so that the caller can handle the exception.

If a class implements Flushable and Closeable, then we can use try-with-resources statement.

Classes are made of fields and methods. Fields are variables. Methods are functions. Or Classes are made of properties and behaviors.
Class inside another class if need to be utilized by the outer class, then it should be static.
Classes come with default constructors. In case you declare a constructor, the default constructor is not available.
Inside Constructor, you can call another constructor using this keyword.
In Java, Every Class extends Object Class. Object Class is the superclass of all the classes.
Class has equals method. equals method is used to compare two objects. default equals method is == operator.

POJOS are Plain Old Java Object. They are simple classes that don't extend any other class and don't implement any interface.
They are used to transfer data between different layers of an application.

JavaBeans are classes that follow the JavaBeans naming convention. They have private fields. They have public getters and setters. They have a no-argument constructor. They implement Serializable interface.

Static initialization blocks are used to initialize static variables. Static initialization blocks are executed when the class is loaded. before the main method. before the constructor.
Instance initialization blocks are used to initialize instance variables. Instance initialization blocks are executed when the class is instantiated. before the constructor.

Encapsulation means wrapping data and methods that work on data within a single unit.
Encapsulation can be used to hide the implementation details of a class.
Inheritance is a mechanism in which one class acquires the properties of another class. It reduces the code duplication.
Extending class should have a matching constructor.
Extending class is called subclass. Extended class is called superclass.

Super keyword is used to call the superclass constructor.
Super Keyword is used to call superclass method.

abstract keyword is used to create abstract classes and abstract methods.
abstract classes can't be instantiated. abstract classes can have abstract and non-abstract methods.
abstract methods must be overridden in the subclass. abstract methods don't have a body.
abstract methods can't be private, static, and final. abstract methods exist only in abstract classes.
abstract class constructor cannot be called directly from outside the class hierarchy.
It can only be called by a subclass constructor or by another constructor within the same abstract class.

Polymorphism is the ability of an object to take on many forms.
Polymorphism is the ability to present the same interface for differing underlying forms.

Interface by default have abstract methods.
Interface is better for polymorphism than abstract class.
Interface has abstract methods, constants, default methods, static methods.
default methods are used to provide default implementation of the methods.
default methods are not necessary to be overridden in the implementation classes.

Dependency Injection is a design pattern in which an object receives other objects that it depends on. These other objects are called dependencies.
It creates loosely coupled applications.
We can use constructor injection, setter injection.
We instantiate the dependencies in the configuration or the main method then pass them to the constructor or the setter method.

Singleton is a design pattern in which only one instance of a class can be created.
Generally, we create a bean/component in the configuration class and annotate it with @Component annotation.
Then we use @Autowired annotation to inject the dependency.

SOLID is a design principle that stands for Single Responsibility Principle, Open-Closed Principle, Liskov Substitution Principle, Interface Segregation Principle, and Dependency Inversion Principle.
Single Responsibility Principle states that a class should have only one responsibility. It should have only one reason to change. One functionality in one class.
Open-Closed Principle states that a class should be open for extension but closed for modification. It should be easy to extend but hard to modify.
Liskov Substitution Principle states that a subclass should be substitutable for its superclass. It should be able to replace the superclass without breaking the application.
Interface Segregation Principle states that a client should not be forced to depend on methods it does not use. Instead of one fat interface, have multiple small interfaces.
Dependency Inversion Principle states that Components should depend on abstractions, not on concretions. It can be achieved by using interfaces and dependency injection.

Null Pointer Exception is thrown when we try to access a field or a method of a null object.
Optional is a container object which may or may not contain a non-null value.

Vector is a thread-safe collection. Vector is synchronized. Vector is slow. If you don't need thread safety, use ArrayList instead of Vector.
Sets of a class require that class to implement equals and hashCode methods. If you don't implement equals and hashCode methods, then the set will not work properly.

Map is an interface.
HashTable is a class that implements Map interface. HashTable is thread-safe. Not null. HashTable is synchronized. HashTable is slow.
LinkedHashMap is a class that implements Map interface. LinkedHashMap is allows null, doubly linked list based implementation, and slow.
TreeMap is a class that implements Map interface. TreeMap is does not allow null, sorted based on the keys, and slow.

HashMap of objects require that class to implement equals and hashCode methods. If you don't implement equals and hashCode methods, then the HashMap will not work properly.
Hashcode of a new object is same as the hashcode of the object that is already present in the HashMap.

Generics are needed to remove the runtime errors of ClassCastException. They enforce the type safety.
ClassCastException is thrown when we try to cast an object to a different type.
Type Arguments are the type parameters that are passed to the generic class or interface. It enforces that our variable can only work with a specific type of objects.
E, K, V, N, T means Element, Key, Value, Number and Type
With Generics, we use wrapper classes instead of primitive types.
Bounded Type Parameters are used to restrict the types that can be used as type arguments in a parameterized type.
Multiple bounded type parameters are used to restrict the types that can be used as type arguments in a parameterized type.
Multiple bounded type parameters are separated by ampersand(&). Class first then interfaces. Only one class can be used. Multiple interfaces can be used.
Wildcards are used to represent an unknown type. Wildcards are used to make a generic type more flexible.
Upper Bounded Wildcards are used to relax the restrictions on a variable. It is represented by <? extends Type>.